# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet cons "declares a const variable" b
const ${1} = ${2}
endsnippet

snippet let "declares a let variable" b
let ${1} = ${2}
endsnippet

snippet fun "creates a function" b
function ${1}(${2}) {
	${3}
}
endsnippet

snippet log "creates a console.log" b
console.log(${1})
endsnippet

snippet cb "creates an arrow function" i
(${1}) => ${2}
endsnippet

snippet if "creates an if block" b
if (${1}) {
	${2}
}
endsnippet

snippet iei "creates an if block" b
if (${1}) {
} else if (${2}){
}
endsnippet

snippet for "creates a for loop" b
for (let ${2} = 0; ${2} < ${1}; ${2}++) {
	${3}
}
endsnippet

snippet whi "creates a while loop" b
while (${1}) {
	${2}
}
endsnippet

snippet fur "creates a functional react component" b
function ${1}(${2}) {
	return (
			<${3}>
			</${3}>
			)
}

export ${1}
endsnippet
